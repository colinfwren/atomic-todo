enum TodoLevel {
  day,
  week,
  month
}

enum ContactPreferences {
  NoMarketing
  Marketing
}

type Todo {
  id: ID!
  name: String!
  completed: Boolean!
  deleted: Boolean!
  startDate: Int!
  endDate: Int!,
  showInYear: Boolean!
  showInMonth: Boolean!
  showInWeek: Boolean!
  posInYear: Int!
  posInMonth: Int!
  posInWeek: Int!
  posInDay: Int!
}

type TodoBoard {
  id: ID!
  name: String!
  startDate: Int!
}

type User {
  id: ID!
  name: String!
  email: String!
  contactPreferences: ContactPreferences!
}

type TodoBoardResult {
  board: TodoBoard!,
  todos: [Todo!]!
}

type Query {
  getTodoBoard(id: ID!): TodoBoardResult
  getTodoBoards: [TodoBoard!]!
}

input TodoUpdateInput {
  id: ID!
  name: String
  completed: Boolean
  startDate: Int
  endDate: Int
  showInYear: Boolean
  showInMonth: Boolean
  showInWeek: Boolean
  posInMonth: Int
  posInWeek: Int
  posInDay: Int
}

input TodoPositionInput {
  granularity: TodoLevel!
  position: Int!
}

input BoardNameUpdateInput {
  id: ID!
  name: String!
}

type Mutation {
  moveBoardForwardByWeek(boardId: ID!): TodoBoardResult
  moveBoardBackwardByWeek(boardId: ID!): TodoBoardResult
  updateTodo(todo: TodoUpdateInput!): Todo,
  updateTodos(todos: [TodoUpdateInput!]!): [Todo]
  updateBoardName(boardNameUpdate: BoardNameUpdateInput!): TodoBoard
  addTodo(boardId: ID!, startDate: Int!, endDate: Int!, positions: [TodoPositionInput]!): TodoBoardResult
  deleteTodo(boardId: ID!, todoId: ID!): TodoBoardResult
  addTodoBoard: TodoBoardResult
}